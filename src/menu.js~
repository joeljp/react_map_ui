function initMenu(){
    $("#inner-grid").append($("<div></div>"), $("<div>Selected</div>"),$("<div><span>Speakers: </span><span id='n_tids'></span> - <span>Locations: </span><span id='n_locs' /></div>"),$("<div>Null</div>"));
    $.each(Sets.SuperSet, function(k,v){
	if(["place","area","region","country","agegroup"].includes(k)){return true} // IE, geographical stuff, for the map
	let nulls = false
	
	if(k == "age" || k == "birth" || k == "rec"){                               // IE, integer -> ranges/inervals
	    let min = 99999;
	    let max = 0;
	    $.each(v, function(i,e){
		if(i == "null"){
		    nulls = true;
		    return;
		}
		i = parseInt(i); // the keys are string reps of ints (Javascript converts them to strings), so they must be correctly parsed to ints
		if(i > max){max = i;}
		if(i < min){min = i;}
		
		if(k == "age" & false){ // this is just here for finding rogue vals. Switched off
		    console.log(typeof i);
		}
	    });
	    $("#inner-grid").append(interval(k,min,max, nulls));
	}
	else{                                                                       // IE, discrete -> check box
	    let vals = [];
	    $.each(v, function(i,e){
		if(i == "null"){
		    nulls = true;
		    return;
		}
		vals.push(i);
	    });
	    $("#inner-grid").append(discrete(k,vals, nulls));
	}
    });
    update();
}
function interval(id,min,max, nulls = false){
    // console.log(id, min, max, nulls);
    // CREATES THE «range slider» STYLE divs with their Sets.updateInterval calls
    // They also call update()
    Sets.interval_add_set(id,min,max);
    let tit = $("<div class='cats' id='"+id+"'>"+id+"</div>");
    let ind = $("<div><span id='slider-indicatorL"+id+"'>"+min+"</span> - <span id='slider-indicatorR"+id+"'>"+max+"</span></div>");
    let sld = $("<div><div id='slider-range"+id+"' /></div>");
    let nul = $("<div></div>");
    if(nulls){
	Sets.add_set(id, "null");
	nul = selector(id, "null");
    }
//    $("#inner-grid").append(tit,ind,sld,nul);  // the function now returns the four divs as an array.
//    $("#slider-range"+id).slider({
    sld.slider({
	range: true,
	min: (min - 1),
	max: (max + 1),
	step: 1,
	values: [min, max],
	reset: function(){
	    $("#slider-range"+id).slider("values", 0, min);
	    $("#slider-range"+id).slider("values", 1, max);
	    $('#slider-indicatorL'+id).html(min);
	    $('#slider-indicatorR'+id).html(max);
	    Sets.interval_add_set(id,min,max);
	},
	slide: function (e, ui) {
	    let from = ui.values[0];
	    let to   = ui.values[1];
	    $('#slider-indicatorL'+id).html(from);
	    $('#slider-indicatorR'+id).html(to);
	    Sets.interval_add_set(id,from,to);
	    if(nul.data("selected")){ // this clause is added as it turns out we might want to retain the null value in the selection after all.
		Sets.add_set(id, null); // 
	    }
	    update();
	},
	change: function(){
	    if(nul.data("selected")){ // IE, on changing range, the null selector should be diactivated
//		nul.trigger("click");
	    }
	}
    });
    $("#slider-range"+id).data("min", min); // not in use right now..
    $("#slider-range"+id).data("max", max); // not in use right now..
    return [tit,ind,sld,nul];
}
function discrete(id, v, nulls = false){
    // console.log("discrete", id, v);
    // CREATES THE «checkbox» STYLE divs with their Sets.add_set and Sets.rem_set calls
    // They also call update()
    $.each(v, function(i,e){Sets.add_set(id, e);});
    let tit = $("<div class='cats' id='"+id+"'>"+id+"</div>");
    let ind = $("<div id='indicator"+id+"'>"+v+"</div>");
    let sel = $("<div class='selector' id='selector"+id+"'/>");
    let nul = $("<div>Ø</div>");
    if(nulls){
	Sets.add_set(id, "null");
	nul = selector(id, "null");
    }
    $.each(v, function(i,e){
	//console.log("each", id, i, e);
	let set = $("<div>",{class: "cell", text: e, id: id+"_"+e}).click(function(){
	    if(nul.data("selected")){
//		nul.trigger("click");
	    }
	    if($(this).data("selected")){
		$(this).css('background-color', '#f50');
		$(this).data("selected", false);
		v.splice( $.inArray(e, v), 1 );
		$("#indicator"+id).html(v.toString());
		Sets.rem_set(id,e); // remove this set from the hash of selected sets
	    }
	    else{
		v.push(e);
		$("#indicator"+id).html(v.toString());
		$(this).css('background-color', '#5f5');
		$(this).data("selected", true);
		Sets.add_set(id,e); // add this set to the hash of selected sets
	    }
	    update();
	}).data("selected", true).css('background-color', '#8f8');
	sel.append(set);
    });
    return [tit,ind,sel,nul];
    $("#inner-grid").append(tit,ind,sel,nul);
}
function update(){
    let locations = new Set;
    let tids = Sets.select_tids();
    tids.forEach(function(e){
	locations.add(Sets.tid2loc[e]);
    });
    $("#n_tids").html(tids.size);
    $("#n_locs").html(locations.size);
    updateMarkers(locations);
}
